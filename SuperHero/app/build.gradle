apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs.kotlin'

repositories {
    mavenCentral()
}

configurations {
    ktlint
}

androidExtensions {
    experimental = true
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "lt.setkus.superhero"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        def publicKey = properties.getProperty('marvel.publickey')
        def privateKey = properties.getProperty('marvel.privatekey')
        def superHeroKey = properties.getProperty('superhero.key')

        debug {
            buildConfigField "int[]", "PUBLIC_KEY", "{${publicKey}}"
            buildConfigField "int[]", "PRIVATE_KEY", "{${privateKey}}"
            buildConfigField "String", "KEY", "\"${superHeroKey}\""
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "int[]", "PUBLIC_KEY", "{${publicKey}}"
            buildConfigField "int[]", "PRIVATE_KEY", "{${privateKey}}"
            buildConfigField "String", "KEY", "\"${superHeroKey}\""
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    lintOptions {
        disable 'MergeRootFrame', 'ObsoleteLintCustomCheck', 'GoogleAppIndexingWarning'
    }
}

dependencies {
    def appDependencies = rootProject.ext.appDependencies
    def appTestDependencies = rootProject.ext.appTestDependencies

    ktlint appDependencies.ktlint

    implementation appDependencies.kotlinStdLib
    implementation appDependencies.kotlinCoroutines
    implementation appDependencies.kotlinAndroidCoroutines

    implementation appDependencies.koin
    implementation appDependencies.koinViewModel

    implementation appDependencies.androidLifecycleKotlinExtensions
    implementation appDependencies.androidLifecycleExtensions

    implementation appDependencies.retrofit
    implementation appDependencies.retrofitGson
    implementation appDependencies.retrofitCoroutines
    implementation appDependencies.okHttp
    implementation appDependencies.okHttpInterceptor

    implementation appDependencies.timber

    implementation appDependencies.appCompat
    implementation appDependencies.constraintLayout
    implementation appDependencies.recyclerView

    implementation appDependencies.navigationFragment
    implementation appDependencies.navigationUi

    implementation (appDependencies.glide) {
        exclude group: "com.android.support"
    }

    testImplementation appTestDependencies.junit
    testImplementation appTestDependencies.mockk
    testImplementation appTestDependencies.assertJ
    testImplementation appTestDependencies.kotlinStdLib
    testImplementation appTestDependencies.kotlinJunitTest

    testImplementation appTestDependencies.androidLifeCycleTestCore

    androidTestImplementation appTestDependencies.androidTestRunner
    androidTestImplementation appTestDependencies.androidTestRules
    androidTestImplementation appTestDependencies.espressoCore
    androidTestImplementation appTestDependencies.mockWebServer
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint
preBuild.dependsOn ktlint
